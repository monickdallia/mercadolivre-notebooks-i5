# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MyuOCjW1fbk6lV9Aj_cHqrh-ueMc7aDG
"""
import streamlit as st
import pandas as pd
import plotly.express as px

# Configurações da página
st.set_page_config(page_title="Dashboard Mercado Livre - Notebooks", layout="wide")
st.title("💻 Dashboard - Notebooks Mercado Livre")
st.markdown("Análise de preços de notebooks com dados coletados automaticamente via web scraping.")

# Carregar dados com cache e tempo de expiração
@st.cache_data(ttl=600)  # 10 minutos
def carregar_dados():
    return pd.read_csv("notebooks_mel.csv")

df = carregar_dados()

# Tratar colunas e normalizar marca
df.columns = [col.strip().lower().replace(" ", "_") for col in df.columns]
df["marca"] = df["marca"].str.strip().str.lower().str.capitalize()

# Mostrar data da coleta 
data_coleta = pd.to_datetime(df["data"]).max().strftime('%d/%m/%Y')
st.markdown(f"📅 Dados coletados em: **{data_coleta}**")

# Filtros
marcas = sorted(df["marca"].dropna().unique())
marca_selecionada = st.sidebar.multiselect("🔍 Filtrar por marca", marcas, default=marcas)

# Faixa de preço com base no preço promocional
preco_min = int(df["Preco_promocional"].min())
preco_max = int(df["Preco_promocional"].max())
faixa_preco = st.sidebar.slider("💰 Filtrar por faixa de preço", preco_min, preco_max, (preco_min, preco_max))

# Aplicar filtros com base no preço promocional
df_filtrado = df[
    (df["marca"].isin(marca_selecionada)) &
    (df["Preco_promocional"] >= faixa_preco[0]) &
    (df["Preco_promocional"] <= faixa_preco[1])
]

# Gráfico 1: Preço médio por marca (promocional)
preco_medio = df_filtrado.groupby("marca")["Preco_promocional"].mean().reset_index()
fig1 = px.bar(preco_medio, x="marca", y="Preco_promocional", title="💰 Preço Médio por Marca (Promocional)", text_auto='.2s')
fig1.update_layout(xaxis_title="Marca", yaxis_title="Preço Promocional (R$)", template="plotly_white")

# Gráfico 2: Distribuição de preços promocionais
fig2 = px.histogram(df_filtrado, x="Preco_promocional", nbins=30, title="📊 Distribuição de Preços Promocionais")
fig2.update_layout(xaxis_title="Preço Promocional (R$)", yaxis_title="Quantidade", template="plotly_white")

# Gráfico 3: Top 10 mais caros (promocional)
top10 = df_filtrado.sort_values(by="Preco_promocional", ascending=False).head(10)
fig3 = px.bar(top10, x="Preco_promocional", y="nome", orientation="h", title="🏷️ Top 10 Notebooks Mais Caros (Promo)", text_auto='.2s')
fig3.update_layout(xaxis_title="Preço Promocional (R$)", yaxis_title="Título", template="plotly_white")

# Layout de gráficos
col1, col2 = st.columns(2)
col1.plotly_chart(fig1, use_container_width=True)
col2.plotly_chart(fig2, use_container_width=True)

st.plotly_chart(fig3, use_container_width=True)

# Tabela interativa com ordenação pelo preço promocional
st.markdown("### 📋 Tabela de Dados Filtrados")
colunas_visiveis = ["nome", "marca", "preco", "Preco_promocional", "link"]
st.dataframe(df_filtrado[colunas_visiveis].sort_values(by="preco_promocional", ascending=False), use_container_width=True)

