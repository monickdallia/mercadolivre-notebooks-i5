# -*- coding: utf-8 -*-
"""script

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_hlG4XymlwmgBQAyw7lNddBTxcxZTEOJ
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter
from datetime import datetime
import re

# Requisição HTTP para a página do Mercado Livre
url = "https://lista.mercadolivre.com.br/notebook-i5#D[A:notebook%20i5]"
headers = {"User-Agent": "Mozilla/5.0"}
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")

# Coletar dados dos produtos
dados = []
for item in soup.select('.ui-search-layout__item'):
    nome = item.select_one('h3.poly-component__title-wrapper')
    preco = item.select_one('span.andes-money-amount__fraction')
    preco_promocional = item.select_one('span.andes-money-amount__fraction')
    link = item.select_one('a.poly-component__title')

    dados.append({
        "Nome": nome.text.strip() if nome else "N/A",
        "Preco": preco.text.strip().replace("R$", "").replace(".", "") if preco else None,
        "Preco_promocional": preco_promocional.text.strip().replace("R$", "").replace(".", "") if preco_promocional else None,
        "Link": link['href'] if link else "N/A",
        "Data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

# Criar DataFrame e limpar dados
df = pd.DataFrame(dados)
df["Preco"] = pd.to_numeric(df["Preco"], errors="coerce")
df["Preco_promocional"] = pd.to_numeric(df["Preco_promocional"], errors="coerce")

# Análise por marca
marcas = ['dell', 'lenovo', 'acer', 'asus', 'hp', 'samsung', 'macbook']
df["Marca"] = df["Nome"].str.lower().apply(lambda nome: next((m for m in marcas if m in nome), "Outros"))

# Análise por faixa de preço
bins = [0, 3000, 5000, 7000, float('inf')]
labels = ["Ate 3000", "3000-5000", "5000-7000", "Acima de 7000"]
df["Faixa_preco"] = pd.cut(df["Preco_promocional"], bins=bins, labels=labels)

# Salvar dados
df.to_csv("notebooks_mel.csv", index=False, encoding='utf-8')

# Estatísticas
descricao = df["Preco_promocional"].describe()
mais_barato = df.loc[df["Preco_promocional"].idxmin()]
mais_caro = df.loc[df["Preco_promocional"].idxmax()]

# Visualização - Histograma de preços
plt.figure(figsize=(10,6))
df["Preco_promocional"].plot(kind='hist', bins=20, color='skyblue', edgecolor='black')
plt.title("Distribuicao dos Precos de Notebooks i5 no Mercado Livre")
plt.xlabel("Preco (R$)")
plt.ylabel("Frequencia")
plt.grid(True)
plt.tight_layout()
plt.savefig("grafico_precos.png")
plt.close()

# Visualização - Preco medio por marca
preco_medio_marca = df.groupby("Marca")["Preco_promocional"].mean().sort_values()
preco_medio_marca.plot(kind="barh", color="mediumseagreen")
plt.title("Preco Medio por Marca")
plt.xlabel("Preco Medio (R$)")
plt.ylabel("Marca")
plt.grid(True)
plt.tight_layout()
plt.savefig("preco_medio_marca.png")
plt.close()

# Visualização - Contagem por faixa de preco
faixa_counts = df["Faixa_preco"].value_counts().sort_index()
faixa_counts.plot(kind='bar', color='orchid', edgecolor='black')
plt.title("Quantidade de Notebooks por Faixa de Preco")
plt.xlabel("Faixa de Preco")
plt.ylabel("Quantidade")
plt.grid(True)
plt.tight_layout()
plt.savefig("faixa_preco.png")
plt.close()
